---
title: "Baseline characteristics (ET1)"
format:
  html:
    toc: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, message = F, warning = F, eval = T)
```

```{r libraries, eval = F}
library(dplyr)
library(gtsummary)
library(gt)
library(here)
library(MultiAssayExperiment)
here::i_am('et1.qmd')
```


```{r results='asis', eval = F}
# Table settings ----
gtsummary::theme_gtsummary_journal(journal = "jama")
gtsummary::theme_gtsummary_compact()

# Data ----
load("data/data_raw.Rdata")

df <- as.data.frame(colData(data)) |> 
  dplyr::filter(visitId == "M0" & interventionId == "S") |> 
  dplyr::mutate(mpstatrs = gsub("[*]", "", mpstatrs),
                compliance = case_when(compliance == 'higher compliance' & is.na(dropout_date) ~ 'Cessation<br>(M6)',
                                       compliance != 'higher compliance' & is.na(dropout_date) ~ 'No cessation<br>(M6)',
                                       !is.na(dropout_date) ~ 'Dropout<br>'),
                compliance = factor(compliance, levels = c("Cessation<br>(M6)",
                                                           "No cessation<br>(M6)",
                                                           "Dropout<br>")),
                activity = case_when(is.na(intactcurr) ~ "unknown",
                                     intactcurr %in% c("0") ~ "no intense activity",
                                     intactcurr %in% c("30 min", "1 h", "1.5 h", "2 h") ~ "30-149 min",
                                     TRUE ~ "≥150 min"),
                activity = factor(activity, levels = c("no intense activity", "30-149 min", "≥150 min", "unknown"))) |> 
  dplyr::select(subjectId, age_at_consent, bmi_at_consent, mpstatrs, compliance, cig_before, smoking_py, activity)

baseline <- as.data.frame(wideFormat(data[c("sysbp", "diabp", "vo2max", "cholesterol", "triglycerides", "hba1c", "glucose", "hemoglobin", "erythrocytes"),,
                            c('Functional sports exam', 'Blood haemogram')], colDataCols = c("visitId", "subjectId"))) |> 
  dplyr::filter(visitId == "M0") 

df <- df |> 
  dplyr::left_join(baseline, by = 'subjectId')|> 
  dplyr::select(-c(subjectId, primary, visitId)) |> 
  dplyr::mutate(Functional.sports.exam_diabp = as.numeric(Functional.sports.exam_diabp)) 

# df2 <- df |> 
#   dplyr::mutate(elevated_sysbp = ifelse(Functional.sports.exam_sysbp > 140, "Yes", "No"),
#                 elevated_diabp = ifelse(Functional.sports.exam_diabp > 90, "Yes", "No"),
#                 elevated_bp = ifelse(Functional.sports.exam_sysbp > 140 & Functional.sports.exam_diabp > 90, "Yes", "No"),
#                 high_glucose = ifelse(Functional.sports.exam_glucose > 100, "Yes", "No"),
#                 high_cholesterol = ifelse(Functional.sports.exam_cholesterol > 240, "Yes", "No"),
#                 high_triglycerides = ifelse(Functional.sports.exam_triglycerids > 200, "Yes", "No"))

hist(df$Functional.sports.exam_triglycerides)
hist(df$Functional.sports.exam_cholesterol)

# print -----
et1 <- df |> 
  gtsummary::tbl_summary(by = 'compliance',
                         type = list(Functional.sports.exam_diabp ~ "continuous"),
                         label = c(age_at_consent = 'Age at consent',
                                   smoking_py = 'Smoking pack years',
                                   cig_before = 'Cigarettes per day at baseline',
                                   bmi_at_consent = 'BMI at consent (kg/m<sup>2</sup>)',
                                   mpstatrs = 'Postmenopausal',
                                   activity = "Weekly intense activity (min)",
                                   Blood.haemogram_hemoglobin = "Haemoglobin (g/dL)",
                                   Functional.sports.exam_vo2max = 'VO<sub>2</sub>peak (mL/kg/min)',
                                   Blood.haemogram_erythrocytes = 'Erythocytes per mL',
                                   Functional.sports.exam_sysbp = "Systolic blood pressure (mmHg)",
                                   Functional.sports.exam_diabp = "Diastolic blood pressure (mmHg)",
                                   Functional.sports.exam_cholesterol = "Total cholesterol (mg/dL)",
                                   Functional.sports.exam_triglycerides = "Triglycerides (mg/dL)",
                                   Functional.sports.exam_hba1c = "HbA1c (%)",
                                   Functional.sports.exam_glucose = "Fasting glucose (mg/dL)"),
                         digits = all_continuous() ~ 1,
                         missing = "no",
                         statistic = list(all_continuous() ~ "{mean} ({sd})",
                                          Functional.sports.exam_triglycerides ~ "{median} ({IQR})",
                                          smoking_py ~ "{median} ({IQR})")) |> 
  gtsummary::add_overall() |> 
  gtsummary::bold_labels() |> 
  modify_header(update = all_stat_cols() ~"<b>{level}</b><br>n = {n}") |> 
  modify_header(update = stat_0 ~ "<b>{level}</b><br><br>n = {n}")


et1 <- et1 |> 
  gtsummary::as_gt() |> 
  # gt::opt_stylize(style = 5) |> 
  gt::tab_options(
    table.width = px(650),
    table.font.size = 12,
    column_labels.font.size = 13,
    table.font.names = "Helvetica"
  ) |> 
  gt::opt_stylize(style = 3) |> 
  gtExtras::gt_add_divider(columns = "stat_0", sides = "right",
                           style = 'solid', weight = px(1))

et1
```

```{r print, eval = F}
# save ----
gt::gtsave(et1, file = here("out/et1.html"))
pagedown::chrome_print(here("out/et1.html"),output =
                       here("out/et1.pdf"))
```

![](out/et1.pdf)
