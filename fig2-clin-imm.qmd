---
title: "Clinical and immune changes (F2, E2, S1)"
format:
  html:
    toc: true
    code-fold: true
    code-overflow: wrap
    code-tools: true
---

# Figures

::: {.panel-tabset} 

## Main figure 2

![](figures-png/figure2.png)

## Extended Data Figure 2

![](figures-png/e2-imm.png)

## Supplementary Figure 1

![](figures-png/s1.png)

:::

# Code

## Setup

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = T, message = F, warning = F, eval = F)
```

```{r libs}
suppressWarnings(suppressMessages({
  library(dplyr)
  library(ggplot2)
  library(here)
  library(patchwork)
  library(ggtext)
  library(broom)
  library(ComplexHeatmap)
  library(MultiAssayExperiment)
  library(RColorBrewer)
  library(viridis)
  
  library(missMDA)
  library(factoextra)
  library(FactoMineR)
}))
```

```{r colors}
cols <- c("#1b69a1", "#48a0af", "#71b5a9", "#ec6669", "#f39668", "#bd647d", "#832c9b", "#5f70a8")
```

```{r functions}
source(here("src/plot_lmm_heatmap_v3.R"))
source(here("src/pca.R"))
source(here("src/pcaBiplot.R"))
source(here("src/pcaHeatmap.R"))

source(here("src/paired_longitudinal_compliance.R"))
source(here("src/comparison_change_int.R"))
```

```{r path}
here::i_am("fig2-clin-imm.qmd")
load(here('out/out_lmm_factor.Rdata'))
```

```{r immunepopulations}
load("src/populations_names_annotated.Rdata")

# exclude some 'duplicate' populations from WB staining
exclude <- c("cells_single_cells_live_t_cells_freq_of_parent",
             "cells_single_cells_live_t_cells_cd4_t_cells_freq_of_parent",
             "cells_single_cells_live_t_cells_cd8_t_cells_freq_of_parent")

populations <- populations |> 
  dplyr::filter(main_analysis == 'yes') |> 
  dplyr::filter(!name %in% exclude) |> 
  dplyr::rename(pop_name = `second name`)
```

## Main Figure 2

### a) Clinical scree plot

#### PCA: all clinical

For the PCA, data are loaded in wide format.

```{r load.pca.dat, eval = F}
load("data/data_normalized.Rdata")
vars <- read.table("src/clinical_variables.csv", header = T, sep = ',') |> dplyr::pull(x)
labels = read.table("src/clinical_variables.csv", header = T, sep = ',')
labels <-  labels |> 
  dplyr::add_row(x = 'age_at_consent',
                 label = 'age at consent')

data_pca <- as.data.frame(wideFormat(data[vars,,],
                                 colData = c('subjectId', 'interventionId', 'time', 'compliance', 'age_at_consent'))) |> 
  dplyr::filter(interventionId == "S" & time %in% c(0, 6)) |> 
  tibble::column_to_rownames('primary') |> 
  dplyr::group_by(subjectId) |>
  dplyr::filter(dplyr::n()==2) |> 
  dplyr::ungroup()
```

Relabel column names using label table for easier interpretation.

```{r relabel.pcadat, eval = F}
# remove superfluous parts of rownames and relabel
colnames(data_pca) <- gsub("Functional.sports.exam_|Vascular.and.body.sonography_|Body.composition_|Blood.haemogram_|Skin.histology.and.transepidermal.water.loss.assay_", "", colnames(data_pca))

data_pca <- data_pca |> 
  dplyr::rename_at(vars(labels[labels$x %in% colnames(data_pca),]$x), ~ labels[labels$x %in% colnames(data_pca),]$label)
```

Run PCA, keeping only complete observations.

```{r run.pca, eval = F}
# keep complete observations only
complete <- data_pca |> 
  dplyr::group_by(subjectId) |> 
  dplyr::count()|> 
  dplyr::filter(n == 2)

dat_pca <- data_pca |> 
  # dplyr::filter(subjectId %in% complete$subjectId) |> 
  dplyr::select(-time) |> 
  select_if(is.numeric) |> 
  dplyr::select_if(~!all(is.na(.))) 

nb <- missMDA::estim_ncpPCA(dat_pca, ncp.max = 10, method.cv = "Kfold", scale=T,verbose = F) # estimate number of dimensions
dat_pca_imp <- missMDA::imputePCA(dat_pca, ncp = 6, scale = T) # impute missing values
res.pca <- FactoMineR::PCA(dat_pca_imp$completeObs,graph = F) # perform PCA on the complete obs
```

Let's look at the contributions:

```{r scree, fig.width=5, fig.height = 4, eval = F}
tmp <- as.data.frame(res.pca$eig) |>
  dplyr::slice(1:10) |> 
  tibble::rownames_to_column('pc') |> 
  dplyr::mutate(pc = gsub('comp ', 'PC', pc))

scree <- tmp |> 
  ggplot(aes(x = forcats::fct_reorder(pc, -`percentage of variance`),
             y = `percentage of variance`)) +
  geom_col(fill = cols[1]) +
  theme_bw() +
  theme(panel.grid = element_blank(),
        axis.ticks.x = element_blank(),
        panel.border = element_blank(),
        axis.text.x = element_text(angle = 90,
                                   hjust = 1)) +
  scale_y_continuous(expand = c(0,0)) +
  labs(x = '', y = 'Percentage of variance (%)')
```

```{r print.scree, eval = F}
cairo_pdf("out/pdf/2a.pdf",
          width = 1.95,
          height = 3.5)
print(scree)
dev.off()
```

### b) Clinical PCA plot

```{r pcaplot, fig.width = 4.5, fig.height = 4, eval = F}
pc.clin <- factoextra::fviz_pca_biplot(res.pca,
                label = 'var',
                axes = c(1, 2),
                habillage = as.factor(data_pca$time),
                addEllipses = T,
                pointshape = 19,
                col.var = 'grey20',
                labelsize = 3,
                geom.ind="point", pointsize=1,
                select.var = list(contrib = 5),
                repel = T) +
  theme_bw() +
  theme(aspect.ratio = 1) +
  guides(fill = element_blank()) +
  scale_colour_manual(name = 'month',
                      values = cols[c(6, 3)],
                      aesthetics = c('fill', 'colour')) +
  labs(title = '')
```

```{r print.pca, eval = F}
cairo_pdf("out/pdf/2b.pdf",
          width = 4,
          height = 4)
print(pc.clin)
dev.off()
```

### c) Clinical PCA Contributions

```{r contrib, fig.width=10, fig.height = 12, eval = F}
contributions <- res.pca$var$contrib |>
  as.data.frame() |> 
  dplyr::select(Dim.1:Dim.4) |> 
  tibble::rownames_to_column("variable") |> 
  dplyr::mutate(theo_contrib = 100/length(unique(variable))) |> 
  tidyr::pivot_longer(Dim.1:Dim.4,
                      names_to = 'pc',
                      values_to = 'value')

pc_perc <- as.data.frame(res.pca$eig)

pc1 <- contributions |> 
  dplyr::filter(pc == 'Dim.1') |> 
  dplyr::arrange(desc(value)) |> 
  dplyr::slice(1:5) |> 
  ggplot(aes(x = reorder(variable, -value),
             y = value)) +
  geom_col(fill = cols[1]) +
  geom_hline(yintercept = contributions$theo_contrib, colour = cols[4],
             linetype = 'dashed',
             linewidth = 1) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 60,hjust = 1),
        title = element_markdown(size = 8),
        axis.ticks.x = element_blank(),
        panel.grid = element_blank(),
        panel.border = element_blank()) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_discrete(expand = c(0, 0)) +
  labs(x = "",
       y = "Contributions (%)",
       title = paste0('<b>PC1</b><br>',
                      signif(pc_perc[1,]$`percentage of variance`, 3), '%'))

pc2 <- contributions |> 
  dplyr::filter(pc == 'Dim.2') |> 
  dplyr::arrange(desc(value)) |> 
  dplyr::slice(1:5) |> 
  ggplot(aes(x = reorder(variable, -value),
             y = value)) +
  geom_col(fill = cols[1]) +
  geom_hline(yintercept = contributions$theo_contrib, colour = cols[4],
             linetype = 'dashed',
             linewidth = 1) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 60,hjust = 1),
        title = element_markdown(size = 8),
        axis.ticks.x = element_blank(),
        panel.grid = element_blank(),
        panel.border = element_blank()) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_discrete(expand = c(0, 0)) +
  labs(x = "",
       y = "Contributions (%)",
       title = paste0('<b>PC2</b><br>',
                      signif(pc_perc[2,]$`percentage of variance`, 3), '%'))

pc3 <- contributions |> 
  dplyr::filter(pc == 'Dim.3') |> 
  dplyr::arrange(desc(value)) |> 
  dplyr::slice(1:5) |> 
  ggplot(aes(x = reorder(variable, -value),
             y = value)) +
  geom_col(fill = cols[1]) +
  geom_hline(yintercept = contributions$theo_contrib, colour = cols[4],
             linetype = 'dashed',
             linewidth = 1) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 60,hjust = 1),
        title = element_markdown(size = 8),
        axis.ticks.x = element_blank(),
        panel.grid = element_blank(),
        panel.border = element_blank()) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_discrete(expand = c(0, 0)) +
  labs(x = "",
       y = "Contributions (%)",
       title = paste0('<b>PC3</b><br>',
                      signif(pc_perc[3,]$`percentage of variance`, 3), '%'))

pc4 <- contributions |> 
  dplyr::filter(pc == 'Dim.4') |> 
  dplyr::arrange(desc(value)) |> 
  dplyr::slice(1:5) |> 
  ggplot(aes(x = reorder(variable, -value),
             y = value)) +
  geom_col(fill = cols[1]) +
  geom_hline(yintercept = contributions$theo_contrib, colour = cols[4],
             linetype = 'dashed',
             linewidth = 1) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 60,hjust = 1),
        title = element_markdown(size = 8),
        axis.ticks.x = element_blank(),
        panel.grid = element_blank(),
        panel.border = element_blank()) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_discrete(expand = c(0, 0)) +
  labs(x = "",
       y = "Contributions (%)",
       title = paste0('<b>PC4</b><br>',
                      signif(pc_perc[4,]$`percentage of variance`, 3), '%'))

plot <- (pc1|pc2|pc3|pc4) &
  theme(axis.text.x = element_text(size = 8))

print(plot)

```

```{r print.contrib, eval = F}
cairo_pdf("out/pdf/2c.pdf",
          width = 5,
          height = 3)
print(plot)
dev.off()
```

### d) Clinical LME

```{r fig.width = 7, fig.height = 8}
labels = read.table(here("src/clinical_variables.csv"), header = T, sep = ',')
load(here("out/out_lmm_factor.Rdata"))

p <- plot_lmm_heatmap_v3(lmm_data_time = out_lmm$`Basic model with packyears`,
                         lmm_data_compliance = out_lmm$`Interaction model with packyears`,
                         relabel = labels,
                         relabel_assay = T,
                         age_cor = F,
                         spy_cor = T,
                         mark_age_cor = F,
                         cluster = 'cluster')
```

```{r, eval = F}
cairo_pdf("out/pdf/2d.pdf",
          width = 6,
          height = 7.5)
print(p)
dev.off()
```

### e) Immune PCA plot (PC1/2) by visitId

```{r}
experiment <- c("Flow cytometry: white blood cell staining", "Flow cytometry: T cell staining")
features <- c("subjectId", "visitId", "time", "compliance", "smoking_py", "cig_curr", "mpstatrs", "age_at_consent", "bmi_at_consent", "etohu_curr", "diet")
load(here("data/data_raw.Rdata"))

relabel <- populations |> 
  dplyr::rename(x = name,
                label = pop_name)

pc <- pca(data, experiment, features, relabel = relabel, complete = T)
```

```{r print.pc.imm}
cairo_pdf("out/pdf/2e.pdf",
          width = 4,
          height = 4)
print(pc$biplot)
dev.off()
```

### f) Immune PCA heatmap

```{r}
# Manual tweaking to fix legend:
x <- pc$heatmap
x@matrix_color_mapping@col_fun <-circlize::colorRamp2(breaks = seq(10, 1.3, length.out = 5),
                                                   colors = rev(viridis::viridis(5)))
x@matrix_color_mapping@levels <- c(0, 5, 10)
cairo_pdf("out/pdf/2f.pdf",
          width = 4,
          height = 3.5)
print(x)
dev.off()
```

### g) ImmuneAge

```{r}
load(here("data/data_baseline_change.Rdata"))

df <- longFormat(data[,,30], colDataCols = c("interventionId", "subjectId", "visitId", "time", "compliance")) |> 
  as.data.frame() |> 
  dplyr::filter(interventionId == 'S' & ! visitId %in% c("M12", "M18")) |> 
  dplyr::mutate(compliance = factor(compliance, levels = c("lower compliance", "higher compliance"))) |> 
  dplyr::filter(!is.na(value))

ylab <- '<b>∆ ImmuneAge</b>'

immage_change <- paired_longitudinal_compliance(df,
                               variable = 'ImmAge_gen',
                               p = 'p.signif',
                               ylab = ylab,
                               nn = 4) &
  theme(aspect.ratio = NULL)
```

```{r print.immage}
cairo_pdf("out/pdf/2g.pdf",
          width = 4,
          height = 3)
print(immage_change)
dev.off()
```

### g) ImmuneSMK

```{r}
load(here("data/data_baseline_change.Rdata"))

df <- longFormat(data[,,31], colDataCols = c("interventionId", "subjectId", "visitId", "time", "compliance")) |> 
  as.data.frame() |> 
  dplyr::filter(interventionId == 'S' & ! visitId %in% c("M12", "M18")) |> 
  dplyr::mutate(compliance = factor(compliance, levels = c("lower compliance", "higher compliance"))) |> 
  dplyr::filter(!is.na(value))

ylab <- '<b>∆ ImmuneSMK</b>'

immsmk_change <- paired_longitudinal_compliance(df,
                               variable = 'ImmuneSMK',
                               p = 'p.signif',
                               ylab = ylab,
                               nn = 4) &
  theme(aspect.ratio = NULL)
```

```{r print.immsmk}
cairo_pdf("out/pdf/2h.pdf",
          width = 4,
          height = 3)
print(immsmk_change)
dev.off()
```

## Extended Data Figure 2

### a) Histogram of p values

```{r}
populations2 <- populations |> 
  dplyr::select(staining, name, pop_name)

# Filter corr
load(here("out/corrSPYbaseline.Rdata"))

corr <- corr |> 
  tidyr::separate(rowname, "_", into = c("assay", "name"), extra = 'merge') |> 
  dplyr::inner_join(populations2)
  
# Histogram
a <- corr |> 
  ggplot(aes(x = p)) +
  geom_histogram(bins = 10,
                 # alpha = 0.5,
                 colour = 'black',fill = 'grey60') +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  labs(x = 'p value',
       y = 'n')
```

```{r print.hist.imm}
cairo_pdf("out/pdf/e2a.pdf",
          width = 2.5,
          height = 3)
print(a)
dev.off()
```

### b) Volcano plot (Correlations)

```{r}
b <- corr |> 
  # dplyr::mutate(pop_name = gsub("[+]", "<sup>+</sup>", pop_name),
  #               pop_name = gsub("[-]", "<sup>-</sup>", pop_name),
  #               pop_name = gsub("TCM", "T<sub>cm</sub>", pop_name),
  #               pop_name = gsub("TN", "T<sub>n</sub>", pop_name)
  #               ) |> 
  dplyr::mutate(padj = p.adjust(p, method = 'holm'),
                lab = ifelse(padj < 0.05, pop_name, NA),
                lab2 = ifelse(p<0.05, pop_name, NA)) |> 
  ggplot(aes(x = cor,
             y = as.numeric(-log10(p)),
             size = as.numeric(-log10(p)),
             colour = as.numeric(-log10(p)),
             shape = staining)) +
  geom_point(alpha = 0.7) +
  scale_size_continuous(range = c(1, 3.5)) +
  scale_colour_viridis_c(option = 'G',end = 0.9,
                         name = '-log10(p)') +
  scale_shape_manual(values = c(16, 17),
                     labels = c('T cell staining',
                               'White blood cell staining')) +
  ggrepel::geom_text_repel(aes(label = lab2),max.overlaps = 6) +
  theme_bw() +
  labs(x = 'Correlation', y = '-log10(p value)') +
  coord_cartesian(clip = 'off',
                  xlim = c(-0.5, 0.5)) +
  guides(size = 'none')
```

```{r print.volcano.imm}
cairo_pdf("out/pdf/e2b.pdf",
          width = 6,
          height = 3)
print(b)
dev.off()
```

### c) Immune populations: WB Cell staining - tree + heatmap

First we generate the tree:

```{r imm.pop.tree}
load("src/populations_names_annotated.Rdata")

library(ggtree)
library(tidytree)

# exclude some 'duplicate' populations from WB staining
exclude <- c("cells_single_cells_live_t_cells_freq_of_parent",
             "cells_single_cells_live_t_cells_cd4_t_cells_freq_of_parent",
             "cells_single_cells_live_t_cells_cd8_t_cells_freq_of_parent")

populations_wb <- populations |>
  dplyr::filter(staining == 'wb staining') |> 
  dplyr::filter(main_analysis == 'yes') |> 
  dplyr::filter(!name %in% exclude) |> 
  dplyr::mutate(pop = gsub("fixable viability dye-", "", `fixable viability dye and antibodies α-`),
                pop = gsub("b/e1+", "be1", pop),
                pop = gsub("[-]C", "-/C", pop),
                pop = gsub("[+]C", "+/C", pop),
                pathString = paste0("cells/", pop, "/", `second name`),
                
                # Monocytes:
                pathString = gsub("cells/CD16", "cells/Monocytes/CD16", pathString),
                
                # reg NK cells
                pathString = gsub("CD3[-]/CD56[+]/CD16[-]", "CD3-/CD56+/regulatory_NK_cells", pathString),
                
                # cyt NK cells
                pathString = gsub("CD3[-]/CD56[+]/CD16[+]", "CD3-/CD56+/cytotoxic_NK_cells", pathString),
                
                # defective NK cells
                pathString = gsub("CD3[-]/CD56[-]/CD16[+]", "CD3-/CD56+/defective_NK_cells", pathString),
                # non-NK
                pathString = gsub("CD3[-]/CD56[-]/CD16[-]", "CD3-/CD56-/non_NK_cells", pathString),
                
                # non T
                pathString = gsub("cells/CD3[-]", "cells/non_T_cells", pathString),
                
                
                # NK
                pathString = gsub("cells/non_T_cells/CD56[+]/", "cells/non_T_cells/NK_cells/", pathString),
                
                
                # non-NK
                pathString = gsub("cells/non_T_cells/CD56[-]/non_NK_cells", "cells/non_T_cells/non_NK_cells", pathString),
                
                # cytotoxic T cells
                pathString = gsub("cells/CD3[+]/CD8[+]", "cells/CD3+/cytotoxic_T_cells", pathString),
                
                # T helper cells
                pathString = gsub("cells/CD3[+]/CD4[+]", "cells/CD3+/T helper cells", pathString),
                
                # NK T cells
                pathString = gsub("cells/CD3[+]/CD56[+]", "cells/CD3+/NK_T_cells", pathString),
                
                # T cells
                pathString = gsub("cells/CD3[+]", "cells/T_cells", pathString),
                
                # memory B cells
                pathString = gsub("cells/CD19[+]/CD27[+]", "cells/CD19+/memory_B_cells", pathString),
                
                # naive B cells
                pathString = gsub("cells/CD19[+]/CD27[-]", "cells/CD19+/naïve_B_cells", pathString),
                
                # B cells
                pathString = gsub("cells/CD19[+]", "cells/B_cells", pathString),
                
                
                label = name,
                name2 = name) |>
  dplyr::mutate(pathString = gsub("CD16[+/-]", "CD16+|-", pathString),
                pathString = gsub("_", " ", pathString),
                pathString = gsub("non T cells/NK cells", "NK cells", pathString),
                pathString = gsub("Monocytes/CD16[+][|][-]", "Monocytes", pathString)) |> 
  dplyr::rename(pop_name = `second name`) |> 
  dplyr::mutate(pathString = gsub("^cells/", "White blood cells/", pathString),
                pathString = ifelse(pop_name == 'Monocytes', 'White blood cells/Monocytes/Monocytes', pathString))

pop_wb <- populations_wb |> 
  data.tree::as.Node() |> 
  tidytree::as.phylo()

pop_wb$tip.label <- gsub("_", " ", pop_wb$tip.label)
pop_wb$node.label <- gsub("_", " ", pop_wb$node.label)

x <- as_tibble(pop_wb)
df <- as_tibble(pop_wb) |> 
  dplyr::mutate(group = case_when(node == 26 | (parent >= 26 & parent <= 29) ~ "B cells",
                                  node == 30 | (parent >= 30 & parent <= 39)~ "NK cells",
                                  node == 40 | (parent %in% c(40, 41, 42)) ~ "Monocytes",
                                  (node == 43) | (parent >= 43) ~ "T cells")) |> 
  dplyr::mutate(group = factor(group, levels = c("Monocytes", "B cells", "T cells", "NK cells")))

tree <- as.treedata(df)

layout = 'roundrect'
tree_wb <- ggtree(tree, aes(colour = group), layout = layout,hang = T) +
  geom_tiplab(geom = 'text', size = 3,
              hjust = 1,offset = 40) +
  geom_nodelab(geom = 'label', size = 2.7, fontface = 'bold') +
  scale_colour_manual(values = cols[c(2,1,5,4,6)]) +
  theme(legend.position = 'none') +
  coord_cartesian(clip = 'off')

order <- tree_wb$data |> 
  dplyr::filter(isTip == T) |> 
  dplyr::arrange(desc(y))

# order[order$label=='B cells CD19',]$label <- 'B cells_CD19' 
```

```{r print.imm.pop.tree}
cairo_pdf(here("out/pdf/e2c1.pdf"),
          width = 5.35, height = 4.5)
print(tree_wb)
dev.off()
```

Now we can generate the heatmap, in order of the tree:

```{r imm.pop.heatmap}
wb_labs_in_order <- populations_wb[match(order$label, populations_wb$pop_name),] |> 
  dplyr::mutate(x = name,
                label = pop_name,
                assay2 = 'Immune') |> 
  dplyr::select(x, label, assay2)

time <- out_lmm$`Basic model with packyears`
comp <- out_lmm$`Interaction model with packyears`

# filter LMEs
wb_heat <- plot_lmm_heatmap_v3(lmm_data_time = time,
                    lmm_data_compliance = comp,
                    relabel = wb_labs_in_order,
                    filter_relabel = T,
                    relabel_assay = F,
                    age_cor = F,
                    spy_cor = T,
                    colour_assays = NULL,
                    cluster = F)
```

```{r print.imm.pop.heatmap}
cairo_pdf(here("out/pdf/e2c2.pdf"),
          width = 5.2, height = 4.5)
print(wb_heat)
dev.off()
```


### d) T Cell staining

```{r t.pop.tree}
load("src/populations_names_annotated.Rdata")

# exclude some 'duplicate' populations from WB staining
exclude <- c("cells_single_cells_live_t_cells_freq_of_parent",
             "cells_single_cells_live_t_cells_cd4_t_cells_freq_of_parent",
             "cells_single_cells_live_t_cells_cd8_t_cells_freq_of_parent")

populations_t <- populations |>
  dplyr::mutate(`second name` = gsub("[(]|[)]", "", `second name`)) |> 
  dplyr::filter(staining == 't cell staining') |> 
  dplyr::filter(main_analysis == 'yes') |> 
  dplyr::filter(!name %in% exclude) |> 
  dplyr::mutate(pop = gsub("fixable viability dye-", "", `fixable viability dye and antibodies α-`),
                pop = gsub("b/e1+", "be1", pop),
                pop = gsub("[-]C", "-/C", pop),
                pop = gsub("[+]C", "+/C", pop),
                pop = gsub("[+]HL", "+/HL", pop),
                pop = gsub("[+]PD", "+/PD", pop),
                pop = gsub("[+]KL", "+/KL", pop),
                pop = gsub("[-]KL", "-/KL", pop),
                pathString = paste0("cells/", pop, "/", `second name`),
                
                # reg NK cells
                pathString = gsub("CD3[-]/CD56[+]/CD16[-]", "CD3-/CD56+/regulatory_NK_cells", pathString),
                
                # cyt NK cells
                pathString = gsub("CD3[-]/CD56[+]/CD16[+]", "CD3-/CD56+/cytotoxic_NK_cells", pathString),
                
                # defective NK cells
                pathString = gsub("CD3[-]/CD56[-]/CD16[+]", "CD3-/CD56+/defective_NK_cells", pathString),
                # non-NK
                pathString = gsub("CD3[-]/CD56[-]/CD16[-]", "CD3-/CD56-/non_NK_cells", pathString),
                
                # non T
                pathString = gsub("cells/CD3[-]", "cells/non_T_cells", pathString),
                
                
                # NK
                pathString = gsub("cells/non_T_cells/CD56[+]/", "cells/non_T_cells/NK_cells/", pathString),
                
                
                # non-NK
                pathString = gsub("cells/non_T_cells/CD56[-]/non_NK_cells", "cells/non_T_cells/non_NK_cells", pathString),
                
                # cytotoxic T cells
                pathString = gsub("cells/CD3[+]/CD8[+]", "cells/CD3+/cytotoxic_T_cells", pathString),
                
                # T helper cells
                pathString = gsub("cells/CD3[+]/CD4[+]", "cells/CD3+/T helper cells", pathString),
                
                # NK T cells
                pathString = gsub("cells/CD3[+]/CD56[+]", "cells/CD3+/NK_T_cells", pathString),
                
                # T cells
                pathString = gsub("cells/CD3[+]", "cells/T_cells", pathString),
                
                # memory B cells
                pathString = gsub("cells/CD19[+]/CD27[+]", "cells/CD19+/memory_B_cells", pathString),
                
                # naive B cells
                pathString = gsub("cells/CD19[+]/CD27[-]", "cells/CD19+/naïve_B_cells", pathString),
                
                # B cells
                pathString = gsub("cells/CD19[+]", "cells/B_cells", pathString),
                
                
                label = name,
                name2 = name) |>
  dplyr::mutate(pathString = gsub("cells/T_cells", "T_cells", pathString)) |> 
  dplyr::rename(pop_name = `second name`)

pop_t <- populations_t |> 
  data.tree::as.Node() |> 
  tidytree::as.phylo()

pop_t$tip.label <- gsub("_", " ", pop_t$tip.label)
pop_t$node.label <- gsub("_", " ", pop_t$node.label)

# ggtree(pop_t,layout = layout,hang = T) +
#   geom_tiplab(geom = 'text', size = 2) +
#   geom_nodelab(geom = 'label', size = 2.4, fontface = 'bold')

x <- as_tibble(pop_t)

df <- as_tibble(pop_t) |> 
  dplyr::mutate(group = case_when(label == "T cells" | is.na(branch.length) ~ "T cells",
                                  label == 'T helper cells' | (parent >= 28 & parent <=38) ~ "T helper",
                                  label == 'cytotoxic T cells' | (parent >= 38) ~ "cytotoxic"))

tree <- as.treedata(df)
layout = 'roundrect'

tree_t <- ggtree(tree, aes(colour = group), layout = layout,hang = T) +
  geom_tiplab(geom = 'text', size = 3,
              hjust = 1,offset = 40) +
  geom_nodelab(geom = 'label', size = 2.7, fontface = 'bold') +
  scale_colour_manual(values = cols[c(7, 4, 8)]) +
  theme(legend.position = 'none') +
  coord_cartesian(clip = 'off')

order <- tree_t$data |> 
  dplyr::filter(isTip == T) |> 
  dplyr::arrange(desc(y))
```

```{r print.t.pop.tree}
cairo_pdf(here("out/pdf/e2d1.pdf"),
          width = 5.35, height = 5)
print(tree_t)
dev.off()
```

Now we can generate the heatmap, in order of the tree:

```{r t.pop.heatmap}
t_labs_in_order <- populations_t[match(order$label, populations_t$pop_name),] |> 
  dplyr::mutate(x = name,
                label = pop_name,
                assay2 = 'Immune') |> 
  dplyr::select(x, label, assay2)

time <- out_lmm$`Basic model with packyears`
comp <- out_lmm$`Interaction model with packyears`

# filter LMEs
t_heat <- plot_lmm_heatmap_v3(lmm_data_time = time,
                    lmm_data_compliance = comp,
                    relabel = t_labs_in_order,
                    filter_relabel = T,
                    relabel_assay = F,
                    age_cor = F,
                    spy_cor = T,
                    colour_assays = NULL,
                    cluster = F)
```

```{r print.t.pop.heatmap}
cairo_pdf(here("out/pdf/e2d2.pdf"),
          width = 5.25, height = 4.75)
print(t_heat)
dev.off()
```

## Supplementary Data Figure 1

### a) ImmuneSMK Coefficients

```{r}
load("out/ImmSMKcoef.Rdata") # ImmAge_gen_coef

tmp <- ImmSMKcoef |> 
  dplyr::select(-pop_name) |> 
  dplyr::left_join(dplyr::select(populations, name, `second name`)) |> 
  dplyr::rename(pop_name = `second name`) |> 
  dplyr::mutate(pop_name = gsub("[+]", "<sup>+</sup>", pop_name),
                pop_name = gsub("[-]", "<sup>-</sup>", pop_name),
                pop_name = gsub("REG", "<sub>REG</sup>", pop_name),
                pop_name = gsub("EM", "<sub>EM</sup>", pop_name))

s1a <-tmp |> 
  dplyr::mutate(col = ifelse(sign(s1) == 1, '(+)', '(-)')) |> 
  ggplot(aes(x = s1,
             y = forcats::fct_reorder(pop_name, abs(s1)))) +
  geom_segment(aes(x = 0, xend = s1,
                   y = pop_name, yend = pop_name),
               alpha = 0.5) +
  geom_vline(xintercept = 0,
             linetype = 'dotted',
             colour = 'grey60') +
  geom_point(aes(colour = col),
             size = 1.5,
             alpha = 0.8) +
  theme_bw() +
  theme(axis.text.y = element_markdown(),
        axis.ticks.y = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position = 'inside',
        legend.position.inside = c(0.2, 0.2),
        legend.background = element_blank())  +
  labs(x = 'ImmuneSMK weight',
       y = '') +
  scale_x_continuous(expand = c(0.025, 0.025)) +
  scale_colour_manual(values = cols[c(5, 7)],
                      name = '')

```

### b) ImmuneSMK current smoking (baseline)

```{r}
load(here("data/data_raw.Rdata"))

df <- longFormat(data[,,31], colDataCols = c("interventionId", "subjectId", "visitId", "time", "compliance", "cig_curr", "smoking_py")) |> 
  as.data.frame() |> 
  dplyr::filter(visitId == 'M0') |> 
  dplyr::mutate(compliance = factor(compliance, levels = c("lower compliance", "higher compliance"))) |> 
  dplyr::filter(!is.na(value)) |> 
  dplyr::mutate(intervention = ifelse(interventionId == 'S', "S", "I"),
                smoking_current = ifelse(interventionId == 'S', 'yes', 'no'))

s1b <- df |> 
  dplyr::filter(rowname == 'ImmuneSMK') |> 
  ggplot(aes(x = smoking_current,
             y = value)) +
  gghalves::geom_half_boxplot(aes(fill = smoking_current,
                                  colour = smoking_current),
                              alpha = 0.3,
                              width = 0.5,
                              outlier.shape = NA,
                              errorbar.length = 0) +
  gghalves::geom_half_point_panel(alpha = 0.6,
                                  size = 1,
                                  aes(colour = smoking_current)) +
  scale_fill_manual(values = cols[c(8, 6)],
                    name = '',
                    aesthetics = c('colour', 'fill')) +
  labs(x = 'Current smoking',
       y = '<b>ImmuneSMK</b><br>(arbitrary units)') +
  guides(fill = guide_legend(nrow = 3),
         colour = guide_legend(nrow = 3)) +
  theme_bw() +
  theme(axis.title.y = element_markdown(),
        legend.position = 'none') +
  ggpubr::stat_compare_means(comparisons = list(c('no', 'yes')),
                             tip.length = 0.01,
                             size = 3)
```

### c) AUC ImmuneSMK (baseline)

```{r}
roc <- pROC::roc(df$smoking_current, df$value, direction = "<")
ci <- ci(roc)
coords <- coords(roc)
anno <- paste0("<b>AUC=", round(roc$auc, 2), "</b><br>(", round(ci[1],2), "-", round(ci[2], 2), ")")

s1c <- coords |> 
  ggplot(aes(x = 1-specificity,
             y = sensitivity)) +
  geom_path(linewidth = 1,
            colour = cols[6]) +
  geom_abline(slope = 1,
              intercept = 0,
              linetype = 'dashed',
              colour = 'grey60') +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) +
  coord_cartesian(expand = c(0.1)) +
  labs(x = '1-Specificity',
       y = 'Sensitivity') +
  annotate('richtext',
           label = anno,
           x = 0.75, y = 0.25,
           fill = NA,label.color = NA)
```


### c) ImmuneSMK current cigarettes (baseline)

```{r}
s1d <- df |> 
  dplyr::filter(rowname == 'ImmuneSMK') |> 
  ggplot(aes(x = as.numeric(cig_curr),
             y = value)) +
  geom_point(size = 2,
             alpha = 0.7) +
  theme_bw() +
  theme(axis.title.y = element_markdown()) +
  geom_smooth(method = 'lm',
              se = F,
              colour = cols[6]) +
  labs(x = 'Cigarettes per day (baseline)',
       y = '<b>ImmuneSMK</b><br>(arbitratry units)') +
  ggpubr::stat_cor(method = 'spearman')

```

### e) ImmuneSMK and smoking pack year (baseline)

```{r}
s1e <- df |> 
  dplyr::filter(rowname == 'ImmuneSMK') |> 
  ggplot(aes(x = as.numeric(smoking_py),
             y = value)) +
  geom_point(size = 2,
             alpha = 0.7) +
  theme_bw() +
  theme(axis.title.y = element_markdown()) +
  geom_smooth(method = 'lm',
              se = F,
              colour = cols[6]) +
  labs(x = 'Smoking pack years (baseline)',
       y = '<b>ImmuneSMK</b><br>(arbitratry units)') +
  ggpubr::stat_cor(method = 'spearman')
```

### Print supplementary figure

```{r}
design <- '
ABCC
DDEE'

plot <- (s1a+s1b+s1c+s1d+s1e) + plot_layout(design = design) +
  plot_annotation(tag_levels = 'a')

cairo_pdf(here("figures-pdf/s1.pdf"), width = 9, height = 6)
print(plot)
dev.off()

ggsave(filename = here("figures-png/s1.png"), plot, width = 9, height = 6, dpi = 300)
```
